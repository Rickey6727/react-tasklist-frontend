{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.snake2camel = exports.camel2snake = exports.strFormat = exports.normalizeStyle = exports.getMonthCalendar = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n/**\n * libralies for the DatePicker\n * @file\n */\n\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _config = require('./config');\n\nvar _config2 = _interopRequireDefault(_config);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * 指定した月のカレンダーを返してくれます\n * @param  {number} year  year\n * @param  {number} month month\n * @return {array<{day:number, month:number, active:boolean, weekday:string, isHoliday:boolean}>} day information object\n */\n\n\nvar getMonthCalendar = exports.getMonthCalendar = function getMonthCalendar(year, month) {\n  var monthDays = [];\n  var idx = (0, _moment2.default)([year, month - 1, 1]);\n  idx.subtract(idx.weekday(), 'days').calendar(); // 第1週から第6週までをイテレート\n\n  for (var i = 0; i < 6; i++) {\n    monthDays.push([]); // 日曜から土曜までをいてレート\n\n    for (var j = 0; j < 7; j++) {\n      monthDays[i].push({\n        day: idx.date(),\n        month: idx.month() + 1,\n        year: idx.year(),\n        active: idx.month() + 1 == month,\n        weekday: _config2.default.weekLabels.en[idx.weekday()],\n        isHoliday: _config2.default.holidays.indexOf(idx.format('YYYY-MM-DD')) > 0\n      });\n      idx.add(1, 'days');\n    }\n  }\n\n  return monthDays;\n};\n/**\n * normalize style object\n * @param  {object} style normalizing style object\n * @return {object} normalized style object\n */\n\n\nvar normalizeStyle = exports.normalizeStyle = function normalizeStyle(style) {\n  // acceptable pseudo class\n  var pseudoClasses = ['hover', 'focus'];\n  /**\n   * check if is a prop is pseudo class\n   * @param  {string}  prop propery. if isPseudoClass, it might be like :hover\n   * @return {boolean}      result\n   */\n\n  var isPseudoClass = function isPseudoClass(prop) {\n    return pseudoClasses.map(function (pseudoClass) {\n      return ':' + pseudoClass;\n    }).includes(prop);\n  };\n\n  var result = {};\n  Object.keys(style).forEach(function (slug) {\n    result[slug] = {}; // prepare in case without those pseudo calsses\n\n    pseudoClasses.map(function (pseudoClass) {\n      return ':' + pseudoClass;\n    }).forEach(function (prop) {\n      if (!style[slug][prop]) {\n        result[slug + prop] = _extends({}, style[slug], style[slug][prop]);\n      }\n    }); // merge, flatten and spread nested properies\n\n    var props = Object.keys(style[slug]);\n    props.forEach(function (prop) {\n      if (isPseudoClass(prop)) {\n        result[slug + prop] = _extends({}, style[slug], style[slug][prop]);\n      } else {\n        result[slug][prop] = style[slug][prop];\n      }\n    });\n  }); // cleanup nested pseudo class\n\n  Object.keys(result).forEach(function (slug) {\n    Object.keys(result[slug]).forEach(function (prop) {\n      if (isPseudoClass(prop)) {\n        delete result[slug][prop];\n      }\n    });\n  });\n  return result;\n};\n/**\n * formatter\n * @param  {string} format str including {word}\n * @param  {object} args   give varables in { word: 'value' }\n * @return {string}        formatted text\n */\n\n\nvar strFormat = exports.strFormat = function strFormat(format, args) {\n  return format.replace(/\\{(\\w+)\\}/g, function (x, matched) {\n    return args[matched];\n  });\n};\n/**\n * convert camel case to snake case\n * @param  {string} camel lowerCamelCaseString\n * @return {string}       snake-case-string\n */\n\n\nvar camel2snake = exports.camel2snake = function camel2snake(camel) {\n  return camel.replace(/[A-Z]/g, function (str) {\n    return '-' + str.toLowerCase();\n  });\n};\n/**\n * convert snake case to camel case\n * @param  {string} snake lowerCamelCaseString\n * @return {string}       snake-case-string\n */\n\n\nvar snake2camel = exports.snake2camel = function snake2camel(snake) {\n  return snake.replace(/-[a-zA-Z]/g, function (str) {\n    return str[1].toUpperCase();\n  });\n};","map":null,"metadata":{},"sourceType":"script"}